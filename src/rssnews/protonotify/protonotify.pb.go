// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protonotify.proto

package protonotify

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Url                  string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_a52f59546f9335df, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Request) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type Response struct {
	Received             bool     `protobuf:"varint,1,opt,name=received,proto3" json:"received,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_a52f59546f9335df, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetReceived() bool {
	if m != nil {
		return m.Received
	}
	return false
}

func init() {
	proto.RegisterType((*Request)(nil), "protonotify.Request")
	proto.RegisterType((*Response)(nil), "protonotify.Response")
}

func init() { proto.RegisterFile("protonotify.proto", fileDescriptor_a52f59546f9335df) }

var fileDescriptor_a52f59546f9335df = []byte{
	// 163 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x28, 0xca, 0x2f,
	0xc9, 0xcf, 0xcb, 0x2f, 0xc9, 0x4c, 0xab, 0xd4, 0x03, 0xb3, 0x85, 0xb8, 0x91, 0x84, 0x94, 0xb4,
	0xb9, 0xd8, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24,
	0x18, 0x15, 0x18, 0x35, 0x58, 0x83, 0x98, 0x32, 0x53, 0x84, 0x04, 0xb8, 0x98, 0x4b, 0x8b, 0x72,
	0x24, 0x98, 0x14, 0x18, 0x35, 0x38, 0x83, 0x40, 0x4c, 0x25, 0x35, 0x2e, 0x8e, 0xa0, 0xd4, 0xe2,
	0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x29, 0x2e, 0x8e, 0xa2, 0xd4, 0xe4, 0xd4, 0xcc, 0xb2, 0x54,
	0x88, 0x1e, 0x8e, 0x20, 0x38, 0xdf, 0xc8, 0x9b, 0x8b, 0xcb, 0xb1, 0x38, 0xb1, 0x20, 0x3c, 0xbf,
	0x28, 0x3b, 0xb5, 0x48, 0xc8, 0x96, 0x8b, 0xc7, 0x33, 0xaf, 0x38, 0xb5, 0xa8, 0xc4, 0x0f, 0x6c,
	0xa5, 0x90, 0x88, 0x1e, 0xb2, 0x9b, 0xa0, 0xb6, 0x4b, 0x89, 0xa2, 0x89, 0x42, 0xac, 0x51, 0x62,
	0x48, 0x62, 0x03, 0x8b, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xe4, 0x0e, 0x1f, 0xca,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AsapWorkerClient is the client API for AsapWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AsapWorkerClient interface {
	InsertNotify(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type asapWorkerClient struct {
	cc *grpc.ClientConn
}

func NewAsapWorkerClient(cc *grpc.ClientConn) AsapWorkerClient {
	return &asapWorkerClient{cc}
}

func (c *asapWorkerClient) InsertNotify(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protonotify.AsapWorker/InsertNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AsapWorkerServer is the server API for AsapWorker service.
type AsapWorkerServer interface {
	InsertNotify(context.Context, *Request) (*Response, error)
}

// UnimplementedAsapWorkerServer can be embedded to have forward compatible implementations.
type UnimplementedAsapWorkerServer struct {
}

func (*UnimplementedAsapWorkerServer) InsertNotify(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertNotify not implemented")
}

func RegisterAsapWorkerServer(s *grpc.Server, srv AsapWorkerServer) {
	s.RegisterService(&_AsapWorker_serviceDesc, srv)
}

func _AsapWorker_InsertNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsapWorkerServer).InsertNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protonotify.AsapWorker/InsertNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsapWorkerServer).InsertNotify(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _AsapWorker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protonotify.AsapWorker",
	HandlerType: (*AsapWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertNotify",
			Handler:    _AsapWorker_InsertNotify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protonotify.proto",
}
